<?php

namespace Oro\Bundle\CatalogBundle\Layout\DataProvider;

use Oro\Bundle\CatalogBundle\Entity\Category;
use Oro\Bundle\CatalogBundle\Provider\CategoryRoutingInformationProvider;
use Oro\Bundle\ConfigBundle\Config\ConfigManager;
use Oro\Bundle\FeatureToggleBundle\Checker\FeatureCheckerHolderTrait;
use Oro\Bundle\FeatureToggleBundle\Checker\FeatureToggleableInterface;
use Oro\Bundle\RedirectBundle\DependencyInjection\Configuration;
use Oro\Bundle\RedirectBundle\DependencyInjection\OroRedirectExtension;
use Oro\Bundle\RedirectBundle\Generator\CanonicalUrlGenerator;
use Oro\Bundle\WebCatalogBundle\Provider\ContentNodeProvider;
use Oro\Bundle\WebsiteBundle\Resolver\WebsiteUrlResolver;
use Oro\Component\Routing\RouteData;

/**
 * Layout data provider. Returns category canonical URL with respect to Include Subcategories parameter.
 */
class CategoryCanonicalUrlDataProvider implements FeatureToggleableInterface
{
    use FeatureCheckerHolderTrait;

    /**
     * @var ConfigManager
     */
    protected $configManager;

    /**
     * @var WebsiteUrlResolver
     */
    protected $websiteSystemUrlResolver;

    /**
     * @var ContentNodeProvider
     */
    private $contentNodeProvider;

    /**
     * @var CanonicalUrlGenerator
     */
    private $canonicalUrlGenerator;

    /**
     * @var CategoryRoutingInformationProvider
     */
    private $routingInformationProvider;

    /**
     * @param ConfigManager $configManager
     * @param WebsiteUrlResolver $websiteSystemUrlResolver
     */
    public function __construct(
        ConfigManager $configManager,
        WebsiteUrlResolver $websiteSystemUrlResolver
    ) {
        $this->configManager = $configManager;
        $this->websiteSystemUrlResolver = $websiteSystemUrlResolver;
    }

    /**
     * @param ContentNodeProvider $contentNodeProvider
     */
    public function setContentNodeProvider(ContentNodeProvider $contentNodeProvider)
    {
        $this->contentNodeProvider = $contentNodeProvider;
    }

    /**
     * @param CanonicalUrlGenerator $canonicalUrlGenerator
     */
    public function setCanonicalUrlGenerator(CanonicalUrlGenerator $canonicalUrlGenerator)
    {
        $this->canonicalUrlGenerator = $canonicalUrlGenerator;
    }

    /**
     * @param CategoryRoutingInformationProvider $routingInformationProvider
     */
    public function setRoutingInformationProvider(CategoryRoutingInformationProvider $routingInformationProvider)
    {
        $this->routingInformationProvider = $routingInformationProvider;
    }

    /**
     * @param Category $category
     * @param bool $includeSubcategories
     * @return string
     */
    public function getUrl(Category $category, bool $includeSubcategories = false)
    {
        // Fetch web catalog data when web_catalog_based_canonical_urls feature is enabled
        if ($this->isFeaturesEnabled()) {
            $variant = $this->contentNodeProvider->getFirstMatchingVariantForEntity($category);
            if ($variant) {
                $url = $this->canonicalUrlGenerator->getDirectUrl($variant);
                if ($url) {
                    return $url;
                }
            }
        }

        // When includeSubcategories is same to the default value returned by provider
        // return canonical URL generated by the default generator
        $routingInformation = $this->routingInformationProvider->getRouteData($category);
        $defaultInclude = $routingInformation->getRouteParameters()['includeSubcategories'] ?? false;
        if ($defaultInclude === $includeSubcategories) {
            return $this->canonicalUrlGenerator->getUrl($category);
        }

        // Otherwise use System URL with a given includeSubcategories parameter as a Canonical URL
        return $this->getSystemUrl($routingInformation, $includeSubcategories);
    }

    /**
     * @param RouteData $routeData
     * @param bool $includeSubcategories
     * @return string
     */
    private function getSystemUrl(RouteData $routeData, bool $includeSubcategories): string
    {
        $routeName = $routeData->getRoute();
        $routeParameters = array_merge(
            $routeData->getRouteParameters(),
            ['includeSubcategories' => $includeSubcategories]
        );
        if ($this->getCanonicalUrlSecurityType() === Configuration::SECURE) {
            return $this->websiteSystemUrlResolver->getWebsiteSecurePath($routeName, $routeParameters);
        }

        return $this->websiteSystemUrlResolver->getWebsitePath($routeName, $routeParameters);
    }

    /**
     * @return string
     */
    private function getCanonicalUrlSecurityType(): string
    {
        $configKey = $this->getConfigKey(Configuration::CANONICAL_URL_SECURITY_TYPE);

        return $this->configManager->get($configKey);
    }

    /**
     * @param string $configField
     * @return string
     */
    private function getConfigKey(string $configField): string
    {
        return sprintf('%s.%s', OroRedirectExtension::ALIAS, $configField);
    }
}
